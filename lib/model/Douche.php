<?php


/**
 * Skeleton subclass for representing a row from the 'douche' table.
 *
 *
 *
 * This class was autogenerated by Propel 1.4.1 on:
 *
 * Thu Apr  1 14:06:29 2010
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    lib.model
 */
class Douche extends BaseDouche {
	protected $twitter_data = array();
	protected $twitter = null;

	/**
	 * Initializes internal state of Douche object.
	 * @see        parent::__construct()
	 */
	public function __construct() {
		// Make sure that parent constructor is always invoked, since that
		// is where any default values for this object are set.
		parent::__construct();
	}

	public function __toString() {
		return '@' . $this->getTwitterScreenName() . ' - ' . $this->getTwitterName();
	}

	public function getTwitterNameSlug() {
		return UrlTools::slugify($this->getTwitterName());
	}

	public function getDouchePercentage() {
		if ($this->isTwitterProtected()) {
			return 0;
		}
		return 100;
		//>10000 followers
		//follow less than 10%
		//tweet more than 20/day

	}

	public function isTwitterProtected() {
		return ($this->getTwitterProtected() == 1);
	}

	/**
	 *
	 * @return int
	 */
	public function getUpVotes() {
		$c = new Criteria;
		$c->add(DoucheVotePeer::DOUCHE_ID, $this->getId());
		$c->add(DoucheVotePeer::VOTE, 1);
		return DoucheVotePeer::doCount($c);
	}

	/**
	 * Get the number of down-votes
	 *
	 * @return int The number of down-votes
	 */
	public function getDownVotes() {
		$c = new Criteria;
		$c->add(DoucheVotePeer::DOUCHE_ID, $this->getId());
		$c->add(DoucheVotePeer::VOTE, -1);
		return DoucheVotePeer::doCount($c);
	}

	/**
	 * Save the object, and automatically update it's data if it is a brand new
	 * record.
	 *
	 * @param PropelPDO $con
	 */
	public function save(PropelPDO $con = null) {
		if ($this->isNew()) {
			if (!$this->updateAllFromTwitter()) {
				return false;
			}
			$this->initiateTwitter();
				$r = $this->twitter->updateStatus('@' . $this->getTwitterScreenName() . ', looks like someone might think you are a bit of a douche... http://douchecrunch.com/' . $this->getTwitterScreenName() . '/' . $this->getTwitterNameSlug());
		}
		parent::save($con);
	}


	/**
	 * Update everything we can from twitter
	 */
	public function updateAllFromTwitter() {
		if (!$this->updateTwitterId()
				|| !$this->updateTwitterScreenName()
				|| !$this->updateTwitterName()
				|| !$this->updateTwitterDescription()
				|| !$this->updateTwitterProtected()
				|| !$this->updateTwitterFollows()
				|| !$this->updateTwitterTweets()
				|| !$this->updateTwitterFriends()
				|| !$this->updateTwitterVerified()
				|| !$this->updateTwitterProfileImageUrl()
				|| !$this->updateLatestTweet()) {
			return false;
		}

		return true;
	}

	/**
	 * Update the latest tweet
	 * @return bool
	 */
	public function updateLatestTweet() {
		if (!$this->retrieveFromTwitter()) {
			return false;
		}

		$this->setLatestTweet($this->twitter_data['status']['text']);

		return true;
	}

	/**
	 * Update the database's twitter ID from Twitter.
	 */
	protected function updateTwitterId() {
		return $this->updateFromTwitter('id', DouchePeer::TWITTER_ID);
	}

	/**
	 * Update the database's twitter screen name from Twitter.
	 */
	protected function updateTwitterScreenName() {
		return $this->updateFromTwitter('screen_name', DouchePeer::TWITTER_SCREEN_NAME);
	}

	/**
	 * Update the database's twitter Name from Twitter.
	 */
	protected function updateTwitterName() {
		return $this->updateFromTwitter('name', DouchePeer::TWITTER_NAME);
	}

	/**
	 * Update the database's twitter description from Twitter.
	 */
	protected function updateTwitterDescription() {
		return $this->updateFromTwitter('description', DouchePeer::TWITTER_DESCRIPTION);
	}

	/**
	 * Update the database's twitter protected status from Twitter.
	 */
	protected function updateTwitterProtected() {
		return $this->updateFromTwitter('protected', DouchePeer::TWITTER_PROTECTED);
	}

	/**
	 * Update the database's twitter follower count from Twitter.
	 */
	protected function updateTwitterFollows() {
		return $this->updateFromTwitter('followers_count', DouchePeer::TWITTER_FOLLOWERS);
	}

	/**
	 * Update the database's twitter tweets from Twitter.
	 */
	protected function updateTwitterTweets() {
		return $this->updateFromTwitter('statuses_count', DouchePeer::TWITTER_TWEETS);
	}

	/**
	 * Update the database's twitter friends from Twitter.
	 */
	protected function updateTwitterFriends() {
		return $this->updateFromTwitter('friends_count', DouchePeer::TWITTER_FRIENDS);
	}

	/**
	 * Update the database's twitter verified from Twitter.
	 */
	protected function updateTwitterVerified() {
		return $this->updateFromTwitter('verified', DouchePeer::TWITTER_VERIFIED);
	}

	/**
	 * Update the database's twitter image url from Twitter.
	 */
	protected function updateTwitterProfileImageUrl() {
		if ($this->updateFromTwitter('profile_image_url', DouchePeer::IMAGE_URL)) {
			if (strpos($this->getImageUrl(), 'twimg.com') !== false) {
				$this->setImageUrl(str_replace('_normal', '', $this->getImageUrl()));
			}
			return true;
		}
		return false;
	}

	/**
	 * Update a value from the twitter data
	 * @param string Source index from the twitter_data array
	 * @param sring $destination Destination DouchePeer::COL_NAME constant
	 * @return bool
	 */
	protected function updateFromTwitter($source, $destination) {
		if (!$this->retrieveFromTwitter()) {
			return false;
		}

		if (isset($this->twitter_data[$source])) {
			$this->setByName($destination, $this->twitter_data[$source], BasePeer::TYPE_COLNAME);
			return true;
		}

		return false;
	}

	protected function retrieveFromTwitter() {

		if ($this->twitter_data !== array()) {
			return true;
		}
		$this->initiateTwitter();


		$params = array();
		$twitter_id = $this->getTwitterId();
		if (!empty($twitter_id)) {
			$params['id'] = $this->getTwitterId();
		} else {
			$params['screen_name'] = $this->getTwitterScreenName();
		}

		$data = json_decode($this->twitter->showUser($params, 'json'), true);
		if (isset($data['error'])) {
			return false;
		}

		//var_dump($data);

		$this->twitter_data = $data;
		return true;
	}

	protected function initiateTwitter() {
		if (is_null($this->twitter)) {
				$this->twitter = new Twitter(sfConfig::get('app_twitter_username'), sfConfig::get('app_twitter_password'));
		}
		return true;
		
	}
} // Douche
